<h2>语法</h2> 
<p>clock [–adjust] [–debug] [–directisa] [–getepoch] [–hctosys] [–set –date=”&lt;日期时间&gt;“] [–setepoch –epoch=&lt;年份&gt;] [–show] [–systohc] [–test] [–utc] [–version]</p> 
<h2>功能介绍</h2> 
<p>RTC 是电脑内奸的硬件时钟，执行这项命令可以显示现在时刻，调整硬件时钟的时间、将系统时间设成与硬件时钟的时间一致，或是把系统时间回存到硬件时钟。假设你没有指定任何参数给 clock 命令，则效果和执行参数 “–show”相同。</p> 
<h2>参数</h2> 
<table> 
 <thead> 
  <tr> 
   <th align="left">参数</th> 
   <th align="left">作用</th> 
  </tr> 
 </thead> 
 <tbody> 
  <tr> 
   <td align="left">–ajust</td> 
   <td align="left">第一次使用“–set –date”或“–systohc”参数设置硬件时钟，会在/etc目录下产生一个名称为 adjtime 的文件。当再次使用这两个参数调整硬件时钟，此文件便会记录两次调整之间的差异，日货执行 clock 命令加上“–ajdust”参数时，程序会自动根据记录文件的数值差异，计算出平均值，自动调整硬件时钟的时间。</td> 
  </tr> 
  <tr> 
   <td align="left">–debug</td> 
   <td align="left">详细显示执行过程，便于 debug 或了解程序的情形</td> 
  </tr> 
  <tr> 
   <td align="left">–getepoch</td> 
   <td align="left">把系统的内核内的时钟新时代（Epoch）数值，呈现到标准输出设备（如显示器）。现在只剩下 Alpha 硬件架构的版本，系统内核才会保留这项数值，如果你不是使用 Digita 的 Alpha 硬件平台，此参数没有任何作用。</td> 
  </tr> 
  <tr> 
   <td align="left">–hctosys</td> 
   <td align="left">把系统时间设成和硬件时钟一致。这个操作会造成系统全面的更新文件的访问时间。</td> 
  </tr> 
  <tr> 
   <td align="left">–set –date=’&lt;日期时间&gt;’</td> 
   <td align="left">设置硬件时钟的日期和时间。这边的日期和时间格式以硬件时钟为准，年份用两位数字表示，即“00”表示公元2000年，时间则采用24小时机制</td> 
  </tr> 
  <tr> 
   <td align="left">–setepoch –ephch=&lt;年份&gt;</td> 
   <td align="left">设置系统核心的硬件时钟的新时代数值</td> 
  </tr> 
  <tr> 
   <td align="left">–show</td> 
   <td align="left">读取硬件时钟的时间，并输出。</td> 
  </tr> 
  <tr> 
   <td align="left">–systohc</td> 
   <td align="left">将系统时间存到硬件时钟</td> 
  </tr> 
  <tr> 
   <td align="left">–utc</td> 
   <td align="left">把硬件时钟上的时间视为CUT</td> 
  </tr> 
  <tr> 
   <td align="left">–version</td> 
   <td align="left">显示版本</td> 
  </tr> 
 </tbody> 
</table> 
<h2>例子</h2> 
<p>显示硬件时钟的时间：</p> 
<pre><code class="language-bash"># clock --show
Sat 27 Dec 2014 01:59:05 PM CST  -0.253200 seconds
</code></pre>